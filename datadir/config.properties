#
# Copyright 2014-2016 European Environment Agency
#
# Licensed under the EUPL, Version 1.1 or â€“ as soon
# they will be approved by the European Commission -
# subsequent versions of the EUPL (the "Licence");
# You may not use this work except in compliance
# with the Licence.
# You may obtain a copy of the Licence at:
#
# https://joinup.ec.europa.eu/community/eupl/og_page/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.
# See the Licence for the specific language governing
# permissions and limitations under the Licence.
#

data.dir=/data/dev/daobses/web/target/daobs/WEB-INF/datadir

reports.dir=/data/dev/daobses/web/target/daobs/WEB-INF/datadir/etf-validation-reports

reporting.dir=/data/dev/daobses/web/target/daobs/WEB-INF/datadir/monitoring/

## Index configuration
es.url=http://localhost:9200
es.host=localhost
es.index.records=records
es.index.indicators=indicators
es.index.dashboards=.dashboards

http.proxyHost=
http.proxyPort=
http.nonProxyHosts=

jms.url=vm://internaljmschannel


ldap.base.provider.url=ldap://ldap.eionet.europa.eu
ldap.base.dn=o=EIONET,l=Europe
ldap.security.principal=
ldap.security.credentials=

ldap.base.search.base=ou=Users
ldap.base.dn.pattern=uid={0}


## CSW harvester configuration
harvester.csw.startup.cli=false
harvester.csw.startup.webapp=false
harvester.csw.startup.jms=true
# Folder containing the configuration file and
# the tasks folder. The task folder is polled for
# any harvesting tasks to create.
harvester.csw.config.folder=/data/dev/daobses/web/target/daobs/WEB-INF/datadir/harvester/
# Time in ms to poll for new tasks.
harvester.csw.tasks.delay=10000
# Number of records per page when calling a GetRecords operation
harvester.csw.getRecords.maxRecords=100
# File with the list of CSW to harvest
harvester.csw.config.filename=config-harvesters.xml


## Tasks / Service and dataset association analyzer configuration
# The search filter (ie. a Solr query).
task.service-dataset-indexer.filter=+resourceType:service
task.service-dataset-indexer.startup.cli=false
task.service-dataset-indexer.startup.jms=true
task.service-dataset-indexer.background=false
# The field to return in the response
task.service-dataset-indexer.fields="id", "recordOperateOn", "serviceType", "harvesterId"
# The task folder is polled at regular interval to index
# any associations found.
task.service-dataset-indexer.folder=/data/dev/daobses/web/target/daobs/WEB-INF/datadir/service-dataset-indexer_data/tasks
# Time in ms to poll for new associations to index.
task.service-dataset-indexer.delay=10000
# Number of records per page
task.service-dataset-indexer.records.per.page=100


## Tasks / INSPIRE Validation configuration
# Start the command line interface - The task will start when the route starts
task.validation-checker.startup.cli=false
# Start the task when a JMS message is sent to the queue
task.validation-checker.startup.jms=true
task.validation-checker.startup.background=false
# The task folder is polled at regular interval to index
# any validation report generated.
task.validation-checker.folder=/data/dev/daobses/web/target/daobs/WEB-INF/datadir/validation-checker_data/tasks
# Time in ms to poll for new associations to index.
task.validation-checker.delay=10000
# The search filter (ie. a Solr query).
# eg. all none validated records
# This filter is not relevant because the process will
# do paging over the set of records but the number of
# valid records will change over time.
task.validation-checker.filter=+documentType:metadata
task.validation-checker.background.filter=+documentType:metadata +completenessIndicator:"-1"
task.validation-checker.background.frequency=0 0/5 * * * ?
task.validation-checker.background.records=50
#task.validation-checker.filter=+documentType:metadata -isValid:[* TO *]
# It's better to validate a set of record with a filter
# which is not affected by the process itself
# eg. only one record
#task.validation-checker.filter=id:570896ed-0462-46e5-bc7b-eaae317c5038
# eg. only on scope
#task.validation-checker.filter=scope:fi
# The field to return in the response
# * The document contains the XML document to validate against
# the validation engine (eg. XSD, Remote service)
# * The id is used to update the index with the results.
task.validation-checker.fields="document", "id"
# Number of records per page
task.validation-checker.records.per.page=100
# INSPIRE remote service validation
#task.validation-checker.inspire.validator.url=http://apps.titellus.net/GeoportalProxyWebServices/resources/INSPIREResourceTester?probeNetworkServices=false&probeDataResourceLocators=false
task.validation-checker.inspire.validator.url=http://inspire-geoportal.ec.europa.eu/GeoportalProxyWebServices/resources/INSPIREResourceTester?probeNetworkServices=false&probeDataResourceLocators=false
task.validation-checker.inspire.probeNetworkServices=false
task.validation-checker.inspire.probeDataResourceLocators=false
#task.validation-checker.inspire.validator.url=http://localhost/GeoportalProxyWebServices/resources/INSPIREResourceTester
# Threshold used to define a valid record
# when the completness indicator is above this
# value
task.validation-checker.inspire.threshold=75.0



## Tasks / DB Validation configuration
# Start the command line interface - The task will start when the route starts
task.db-validation-checker.startup.cli=false
# Start the task when a JMS message is sent to the queue
task.db-validation-checker.startup.jms=false
# Time in ms to poll for new associations to index.
task.db-validation-checker.delay=10000
# The search filter (ie. a Solr query). See validation-checker for other options
task.db-validation-checker.filter=+documentType:metadata
#task.db-validation-checker.filter=+documentType:metadata -isValid:[* TO *]
# The field to return in the response needed by the task
task.db-validation-checker.fields=id
# Number of records per page
task.db-validation-checker.records.per.page=200
# Database url
task.db-validation-checker.db.url=jdbc:postgresql://localhost:5432/geocat
task.db-validation-checker.db.driverClassName=org.postgresql.Driver
task.db-validation-checker.db.username=www-data
task.db-validation-checker.db.password=www-data
# Database query to retrieve validation status for a metadata record
# For a GeoNetwork database use
task.db-validation-checker.db.sql.selectMetadataValidationResultQuery=SELECT status \
  FROM validation v, metadata m \
  WHERE v.metadataId = m.id AND \
   m.uuid = ? AND \
   v.valType = 'schematron-rules-inspire'
# Value indicating a valid metadata record
task.db-validation-checker.db.validRuleResult=1
# ... or customize the query for you DB
#task.db-validation-checker.db.sql.selectMetadataValidationResultQuery=select mdv_rule_result from geocat.md_validation_results mdvr, geocat.metadata md where md.uuid = ? and mdvr.mdv_md_id = md.id and mdvr.mdv_rule_title='INSPIRE'
#task.db-validation-checker.db.validRuleResult=Metadonnee conforme




## Tasks / ETF Validation configuration
# Start the command line interface - The task will start when the route starts
task.validation-etf-checker.startup.cli=false
# Start the task when a JMS message is sent to the queue
task.validation-etf-checker.startup.jms=true
task.validation-etf-checker.startup.background=false
# The task folder is polled at regular interval to index
# any validation report generated.
task.validation-etf-checker.folder=/data/dev/daobses/web/target/daobs/WEB-INF/datadir/validation-etf-checker_data/tasks
# Time in ms to poll for new associations to index.
task.validation-etf-checker.delay=10000
# Time in minutes before killing ETF process
task.validation-etf-checker.timeout=60
# Query to retrieve service metadata
task.validation-etf-checker.filter=+documentType:metadata +resourceType:service
# WMS link
#task.validation-etf-checker.filter=id:D46AE0BE-1BD5-A89B-CAF8-C91EF7CD4C0C
# WFS link
#task.validation-etf-checker.filter=id:01f17f08-7268-4f92-ac6e-bacda60cf2c2
# The field to return in the response
# * The document contains the XML document to validate against
# the validation engine (eg. XSD, Remote service)
# * The id is used to update the index with the results.
task.validation-etf-checker.fields="id", "link", "linkUrl", "serviceType", "linkProtocol", "harvesterUuid"
# Number of records per page
task.validation-etf-checker.records.per.page=200
# ETF service validation
task.validation-etf-checker.validator.path=/data/dev/daobses/web/../tasks/etf-validation-checker/ETF/ETF
task.validation-etf-checker.validator.reports.path=${task.validation-etf-checker.etf.validator.path}/reports
task.validation-etf-checker.validator.soapui.path=${task.validation-etf-checker.etf.validator.path}/bin/soapui-4.5.1
task.validation-etf-checker.validator.htmlreports.path=/data/dev/daobses/web/target/daobs/WEB-INF/datadir/etf-validation-reports
task.validation-etf-checker.validator.htmlreports.url=http://localhost:8081/etf-validation-reports
upload.maxsize=100000000
